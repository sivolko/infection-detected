# Optimized Firebase Hosting deployment workflow
name: Deploy to Firebase Hosting on merge
on:
  push:
    branches:
      - main

env:
  RUBY_VERSION: '3.2'
  NODE_VERSION: '18'

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Ruby setup with caching
      - name: 💎 Setup Ruby with bundler cache
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      # Node.js setup with caching
      - name: 📦 Setup Node.js with npm cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Install Node dependencies (only dev dependencies needed)
      - name: 🔧 Install Node dependencies
        run: npm ci --only=dev

      # Commit updated Gemfile.lock if it was regenerated
      - name: 🔒 Commit updated Gemfile.lock
        run: |
          if [ -n "$(git status --porcelain Gemfile.lock)" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add Gemfile.lock
            git commit -m "🔒 Update Gemfile.lock with Ruby 3.2 compatible gems" || true
            git push
          fi

      # Cache Jekyll build
      - name: 🗂️ Cache Jekyll build
        uses: actions/cache@v3
        with:
          path: |
            .jekyll-cache
            _site
          key: ${{ runner.os }}-jekyll-${{ hashFiles('_config.yml', '_config_prod.yml', 'Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-jekyll-

      # Build Jekyll site with production configuration
      - name: 🏗️ Build Jekyll site (Production)
        run: |
          bundle exec jekyll build --config _config.yml,_config_prod.yml --trace
        env:
          JEKYLL_ENV: production

      # Verify build output
      - name: 🔍 Verify build output
        run: |
          echo "Build completed. Site structure:"
          ls -la _site/
          echo "Total files: $(find _site -type f | wc -l)"
          echo "Site size: $(du -sh _site)"

      # Deploy to Firebase Hosting
      - name: 🚀 Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_INFECTION_DETECTED }}
          channelId: live
          projectId: infection-detected
